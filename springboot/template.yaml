AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  lambda-springboot-sample
  Sample SAM Template for lambda-springboot

Globals:
  Function:
    Tracing: Active
    CodeUri: target/springboot-lambda-function-1.0.0-SNAPSHOT-aws.jar
    Handler: software.amazonaws.example.product.product.handler.CustomHandler
    Runtime: java11
    Timeout: 30
    MemorySize: 1024
    Environment:
      Variables:
        PRODUCT_TABLE_NAME: !Ref ProductsTable
        VLE_VAULT_ADDR: https://xxx
        VAULT_AUTH_ROLE: sam-app-GetProductsFunctionRole-6IWQETJTQC86
        VAULT_AUTH_PROVIDER: aws
        VAULT_SECRET_PATH_DB: database/creds/lambda-function
        VAULT_LOG_LEVEL: debug
        AWS_STS_REGIONAL_ENDPOINTS: regional
        VAULT_SECRET_FILE_DB: /tmp/vault_secret.json
        VAULT_SKIP_VERIFY: true
        VAULT_STS_ENDPOINT_REGION: eu-west-1
        VAULT_DEFAULT_CACHE_TTL: 15m
        VAULT_DEFAULT_CACHE_ENABLED: true
        APPDYNAMICS_ACCOUNT_NAME: redacted
        APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY: redacted
        APPDYNAMICS_APPLICATION_NAME: demo
        APPDYNAMICS_CONTROLLER_HOST: redacted.saas.appdynamics.com
        APPDYNAMICS_SERVERLESS_API_ENDPOINT: https://fra-sls-agent-api.saas.appdynamics.com
        APPDYNAMICS_CONTROLLER_PORT: 443
    Layers:
      - arn:aws:lambda:eu-west-1:634166935893:layer:vault-lambda-extension:13

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Name: My Lambda springboot Sample API

  GetProductByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          FUNCTION_NAME: getProductById
          VAULT_AUTH_ROLE: sam-app-GetProductFunctionRole
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ProductsTable
      Events:
        GetRequestById:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /products/{id}
            Method: get

  GetProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          FUNCTION_NAME: getAllProducts
          VAULT_AUTH_ROLE: sam-app-GetProductsFunctionRole-6IWQETJTQC86
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ProductsTable
      Events:
        GetRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /products
            Method: get

  PutProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          FUNCTION_NAME: createProduct
          VAULT_AUTH_ROLE: sam-app-PutProductFunctionRole
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable
      Events:
        PutRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /products/{id}
            Method: put

  DeleteProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          FUNCTION_NAME: deleteProduct
          VAULT_AUTH_ROLE: sam-app-DeleteProductFunctionRole
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable
      Events:
        PutRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /products/{id}
            Method: delete

  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'PK'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'PK'
          KeyType: 'HASH'
      BillingMode: PAY_PER_REQUEST

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for Springboot sample function"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/products"
